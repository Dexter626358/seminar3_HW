"""3. В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
 Не учитывать знаки препинания и регистр символов.
За основу возьмите любую статью из википедии или из документации к языку."""
str_example = "Python – это универсальный современный ЯП высокого уровня, к преимуществам которого относят высокую производительность программных решений и структурированный, хорошо читаемый код.  Синтаксис Питона максимально облегчен, что позволяет выучить его за сравнительно короткое время. Ядро имеет очень удобную структуру, а широкий перечень встроенных библиотек позволяет применять внушительный набор полезных функций и возможностей. ЯП может использоваться для написания прикладных приложений, а также разработки WEB-сервисов." \
              " Python может поддерживать широкий перечень стилей разработки приложений, в том числе, очень удобен для работы с ООП и функционального программирования. " \
              "Один из самых популярных интерпретаторов языка –  CPython, написанный на Си. Распространяется эта среда разработки бесплатно по свободной лицензии. Интерпретатор поддерживает большинство популярных платформ. " \
              "Питон активно развивается. Примерно раз в 2 года выходят обновления. Важной особенностью языка является отсутствие таких стандартов кодировки как ANSI, ISO и некоторых других, они работают благодаря интерпретатору. " \
              "Забавные подробности У самих разработчиков языка присутствует определенное чувство юмора. Они разработали концепцию философии программирования на языке Python которая получила название «The Zen of Python» (Дзен Питона). По сути, это набор основных принципов, которые разработчики языка считают очень важными. Изучить их можно на сайте, либо получать по одной в случайном порядке раз в день при помощи запроса import this. " \
              "Язык программирования позаимствовал название у популярного в 70 годы шоу Monty Python’s Flying Circus. Но большая часть пользователей об этом не знают и ассоциируют название с пресмыкающимся. Одна из целей создателей Питона – сделать программирование простым и забавным. Язык начал разрабатываться во второй половине 80-х г.г. прошлого века. Автором Питона стал программист из Нидерландов по имени Гвидо ван Россум. Изначально язык должен был стать объектно-ориентированным. Фактически, это был язык сценариев, т.е. скриптовый язык. В феврале 1991 года ван Россум опубликовал исходный код языка в одной из новостных групп. " \
              "Основными факторами успеха Python стали удачный выбор места презентации в популярном и массовом профессиональном сообществе в сочетании с действительно простым кодом и широкими возможностями. Впоследствии Гвидо создал специализированный портал PEP, где идет регулярное обсуждение по развитию и улучшению продукта. В 2008 года появилось большое обновление языка –  Python 3.0. Версия продукта известна так же под названием Py3k. В этой версии были устранены многие ключевые недоработки в архитектуре ядра. Что было важно – новая версия продукта сохранила полную совместимость с более старыми вариантами. Сегодня разработчиками поддерживается две линии — Python 3.x и 2.x " \
              "Как повлияли другие ЯП на развитие Питона " \
              "Питон – не самый «молодой» язык программирования, но и не слишком старый. К моменту его создания уже существовали такие «монстры», как Паскаль или Си. А потому при создании ЯП авторы старались взять лучшее из различных платформ для разработчиков. Фактически Python представляет из себя своеобразный «джем» удачных решений более чем из 8 различных языков. К примеру, байт компиляция появилась еще до создания Питона, но была очень удачна в него интегрирована. Поддержка ОС " \
              "Питон поддерживает практически все распространенные операционные системы. Он может прекрасно работать на карманных компьютерах, так и на больших серверах. В случае, если платформа значительно устаревает, она исключается из поддержки ядра. К примеру, версии языка, начиная от 2.6, уже не работают с платформами Windows 95, 98 и ME. В случае необходимости можно воспользоваться более старыми версиями, отказавшись от применения современных инструментов языка. И тогда приложение будет работать в том числе с этими ОС. Для старых версий периодически выходят патчи. Язык также может поддерживать работу с виртуальной машиной Java. " \
              "ЯП имеет четко структурированное семантическое ядро и достаточно простой синтаксис. Все, что пишется на этом языке, всегда легко читаемо. В случае необходимости передать аргументы язык использует функцию call-by-sharing. " \
              "Набор операторов в языке вполне стандартен. Удобная особенность синтаксиса – это форматирование текста кода при помощи разбивки их на блоки с помощью отступов, которые создают нажатием клавиш «Space» и «Tab». В синтаксисе отсутствуют фигурные или операторные скобки, обозначающие начало и конец блока. Такое решение заметно сокращает количество строк тела программы и приучает программиста соблюдать хороший стиль и аккуратность при написании кода. " \
              "В 2018 году в Питоне были изменены некоторые ключевые термины, но это скорее упростило понимание. А потому проблем у разработчиков при изучении документации не возникает. Выражения Выражение в Питоне – это строка, содержащая набор операторов (команд) и операндов (переменных и констант), выполняющая определенную функцию. Приведем пример: [python]length = 5 breadth = 2 area = length * breadth print(‘Площадь равна’, area) print(‘Периметр равен’, 2 * (length + breadth))[/python] Здесь операторами являются «=» (присвоить значение), математические символы сложения и умножения, а также команда «print» (вывод на экран). " \
              "Операнды – это переменные length, breadth и area, а также их значения (2 и 5). Выражения – целые строки, которые могут содержать один или несколько операторов. Интересные особенности выражений: " \
              "Для форматирования строк можно использовать «обратный слеш» (\). " \
              "Благодаря структуре «лесенкой» язык очень удобен для проведения цепочечных сравнений. " \
              "Логические операторы очень просты с точки зрения синтаксиса, а потому считаются «ленивыми». Удобно реализовано управление списками и прочими последовательностями. Есть индексация элемента в списке. " \
              "Главный плюс: строки выражений состоят из простых операторов, большинство из которых понятны в том числе разработчикам, незнакомым с Питоном, так как синтаксис сходен с другими языками и понятен интуитивно. При этом выражения формируются без лишних служебных скобок и других операторов типа «начало» и «конец», что делает код проще для восприятия. " \
              "Типы данных " \
              "Синтаксис Python подразумевает обязательное определение типа данных для переменных, констант, массивов, списков и т.д. Основные типы ничем не отличаются от других языков с жестко заданной типизацией. " \
              "Самые важные типы: " \
              "Числовые: целые, дробные, вещественные с плавающей точкой, комплексные. " \
              "Логические: тип для хранения значений алгебры логики – «истина» или «ложь». " \
              "Строковые: содержат символы Юникода, в том числе, html-код. " \
              "Списки – упорядоченные массивы переменных. " \
              "Кортежи – массив упорядоченных констант, т.е. значений, которые не могут изменяться в процессе работы. " \
              "Множества – массивы неупорядоченных данных. " \
              "Словари – специализированный массив, состоящий из пары – «ключ» — «значение». " \
              "Байты, массивы байтов – поименованные области памяти для хранения изображений (jpg, gif и т.д.), pdf-документов и других файлов. " \
              "Здесь объектами считаются практически все конструкции. А потому собственные типы имеют, в том числе, классы, файлы или методы."

freaq_letters = {}
punctuation = ["@", "#", "%", "^", "&", "*", "(", ")", "_", "+", "<", ">", '–', "?", ",", ".", "/", "|", ":", ";", "~", "-", "=", "+"]
for j in punctuation:
    letters1 = str_example.replace(j, "")

letters = letters1.lower().split()
for i in letters:
    if i not in punctuation:
        if i not in freaq_letters.keys():
            freaq_letters[i] = 1
        else:
            freaq_letters[i] += 1

sorted_tuple = sorted(freaq_letters.items(), key=lambda x: x[1], reverse=True)
most_common = sorted_tuple[:10]
print("10 наиболее часто встречающихся слов в тексте: ")
number = 1
for key, value in most_common:
    print(f"{number}. {key} : {value}")
    number += 1

